{
  "name": "getit",
  "description": "Retrieve local and remote files through a simple interface",
  "author": {
    "name": "Damon Oehlman",
    "email": "damon.oehlman@gmail.com"
  },
  "version": "0.3.3",
  "main": "index.js",
  "dependencies": {
    "debug": "*",
    "mkdirp": "~0.3.5",
    "hyperquest": "~0.1.7"
  },
  "devDependencies": {
    "mocha": "~1.12.0",
    "rimraf": "~2.2.2"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/DamonOehlman/getit.git"
  },
  "bugs": {
    "url": "http://github.com/DamonOehlman/getit/issues"
  },
  "scripts": {
    "gendocs": "codeme > README.md",
    "lint": "jshint *.js && jshint lib/schemes/*.js",
    "test": "$(npm bin)/mocha --reporter spec --timeout 10000"
  },
  "directories": {
    "test": "test"
  },
  "keywords": [
    "download",
    "fetch",
    "curl",
    "wget",
    "request"
  ],
  "license": "MIT",
  "readme": "# getit\n\nThis is a simple remote file loader that makes it easy to open both local \nand remote files in a simple (and consistent) way.  Behind the scenes getit\nuses [hyperquest](https://github.com/substack/hyperquest) module to to the\nheavy lifting.\n\n[\n![Build Status]\n(https://travis-ci.org/DamonOehlman/getit.png?branch=master)\n](https://travis-ci.org/DamonOehlman/getit)\n\n## Example Usage\n\nGetting a file:\n\n```js\ngetit('files/test.txt', function(err, data) {\n    \n});\n```\n\nGetting some online content:\n\n```js\ngetit('http://www.google.com/', function(err, data) {\n    \n});\n```\n\n### Specifying the Current Working Directory\n\nBy default, all files are resolved to the current working directory through \nusing `path.resolve`. The default directory resolved against can be\noverriden, however, by passing options to the `getit` function call:\n\n```js\ngetit('files/test.txt', { cwd: __dirname }, function(err, data) {\n    \n});\n```\n\nSpecifying the `cwd` option has no effect on remote requests, but there \nmight be other options added in time to tweak the default\nhyperquest behaviour eventually.  The general principle is you should be \nable to use `getit` to get the content of both local and remote resources\nwithout having to dramatically change the way you use the library.\n\n## GetIt Options\n\nThe `getit` function supports a second argument for providing options to\nchange the default getit behaviour.  \n\n### Caching use `cachePath`\n\nIf you provide an optional `cachePath`, then getit will cache a copy of \nthe data retrieved in the specified path.  In addition to the data\nretrieved, an [etag](http://en.wikipedia.org/wiki/HTTP_ETag) value will\nbe stored in a lookup file.  This will be used in subsequent lookups\nusing the `If-None-Match` header.\n\nBy default, caching will only occur on a server that provides an etag\nvalue, but this can be overridden by also setting the `cacheAny`\noption to true.\n\n```js\nvar opts = {\n  cachePath: '/tmp'\n};\n\ngetit(\n  'github://DamonOehlman/getit/test/files/test.txt',\n  opts,\n  function(err, data) {\n    \n  }\n);\n```\n\nFinally, if you would prefer not to wait around for a HTTP request and\na `304` response, then you can provide the `preferLocal` option always\nused the cached copy of a file if it exists in the cache folder.\n\n### Aggressive caching with `preferLocal`\n\nIf you __really__ want to avoid a round-trip to web servers to check the\nfreshness of the cache, then it might be worth using the `preferLocal`\noption also.  This instructs getit to skip the `etag` check if it finds\nthe required file in the cache directory.\n\nIf you do decide to implement this functionality, it's recommended that\nyou provide some option in your application to allow users to clear the\nlocal cache path.\n\n## getit cache helpers\n\n### cache.get(target, opts, callback)\n\n### cache.update(target, opts, resErr, res, body, callback)\n\n### Github Gists (gist://)\n\nTo get the default file (first file) from a particular gist:\n\n```js\ngetit('gist://3344823', function(err, content) {\n});\n```\n\nTo get a specific file from a particular gist:\n\n```js\ngetit('gist://1261033/bridge-server.js', function(err, content) {\n});\n```\n\n### Github Includes (github://)\n\n```js\ngetit('github://DamonOehlman/getit/index.js', function(err, data) {\n});\n```\n\n## Custom URL Schemes\n\nGetit supports a number of custom url schemes to help you type less\ncharacters:\n\n### Contributing URL Schemes\n\nThe task of the scheme translator is to convert a url of the custom scheme\ninto a standard URI that can be passed to the GET.\n\nTo create your own scheme translator simply fork the library,\ndecide on the scheme / protocol prefix (e.g. github, flickr, etc) and\nthen create the relevant translator in the `lib/schemes` directory. \nWhen `getit` encounters a request for a url matching your custom scheme\ntranslator will be required and involved before actually requesting the url.\n\nSimple.\n",
  "readmeFilename": "README.md",
  "_id": "getit@0.3.3",
  "dist": {
    "shasum": "a90b4f7055f8e210503748b259b8ebe921a4f416"
  },
  "_from": "getit@0.3.x",
  "_resolved": "https://registry.npmjs.org/getit/-/getit-0.3.3.tgz"
}
